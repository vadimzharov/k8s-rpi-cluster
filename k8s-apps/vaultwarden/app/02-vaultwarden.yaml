apiVersion: v1
kind: Service
metadata:
  name: vaultwarden
  labels:
    app.kubernetes.io/name: vaultwarden
    app.kubernetes.io/instance: vaultwarden
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: vaultwarden
    app.kubernetes.io/instance: vaultwarden
---
apiVersion: v1
kind: Service
metadata:
  name: vaultwarden-ws
  labels:
    app.kubernetes.io/name: vaultwarden
    app.kubernetes.io/instance: vaultwarden
spec:
  type: ClusterIP
  ports:
  - port: 3012
    targetPort: websockets
    protocol: TCP
    name: websockets
  selector:
    app.kubernetes.io/name: vaultwarden
    app.kubernetes.io/instance: vaultwarden    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vaultwarden
  labels:
    app.kubernetes.io/name: vaultwarden
    app.kubernetes.io/instance: vaultwarden
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: vaultwarden
      app.kubernetes.io/instance: vaultwarden
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vaultwarden
        app.kubernetes.io/instance: vaultwarden
    spec:
      serviceAccountName: default
      terminationGracePeriodSeconds: 90
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      volumes:
        - name: vw-workingdir
          emptyDir: {}
      containers:
        - name: vaultwarden
          env:
          - name: LOG_LEVEL
            value: info 
          - name: WEBSOCKET_ENABLED
            value: 'true'
          - name: SIGNUPS_ALLOWED
            value: 'false'
          - name: ADMIN_TOKEN
            valueFrom:
              secretKeyRef:
                name: vw-admin-key
                key: vwadminkey
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 256Mi        
          image: "docker.io/vaultwarden/server:latest"
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: websockets
              containerPort: 3012
              protocol: TCP              
          volumeMounts:
            - name: vw-workingdir
              mountPath: /data
          livenessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 30
            failureThreshold: 10
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 30
            failureThreshold: 10
            timeoutSeconds: 1
            periodSeconds: 10
        - name: vw-backup-daemon
          image: quay.io/vadimzharov/podbackup:latest
          lifecycle:
            preStop:
              exec:
                command: ["/usr/local/bin/podbackup", "backup"]
          command: ["podbackup"]
          args: ["backup-daemon"]
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 128Mi
          volumeMounts:
            - name: vw-workingdir
              mountPath: /data
          envFrom:
          - configMapRef:
              name: backup-restore-settings
          - secretRef:
              name: backup-restore-aws-creds
      initContainers:
        - name: vw-restore
          image: quay.io/vadimzharov/podbackup:latest
          command: ["podbackup"]
          args: ["restore"]
          volumeMounts:
            - name: vw-workingdir
              mountPath: /data
          envFrom:
          - configMapRef:
              name: backup-restore-settings
          - secretRef:
              name: backup-restore-aws-creds              

